/*
 * Skybot, a multipurpose discord bot
 *      Copyright (C) 2017 - 2020  Duncan "duncte123" Sterken & Ramid "ramidzkh" Khan & Maurice R S "Sanduhr32"
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package ml.duncte123.skybot.commands.`fun`

import com.fasterxml.jackson.databind.JsonNode
import me.duncte123.botcommons.messaging.EmbedUtils
import me.duncte123.botcommons.messaging.MessageUtils.sendEmbed
import me.duncte123.botcommons.web.WebUtils
import ml.duncte123.skybot.objects.command.Command
import ml.duncte123.skybot.objects.command.CommandContext
import ml.duncte123.skybot.utils.AirUtils

class FakeWordCommand : Command() {

    init {
        this.name = "fakeword"
        this.aliases = arrayOf("word", "randomword", "randomfakeword")
        this.help = "Shows a random word generated by an AI"
    }

    override fun execute(ctx: CommandContext) {
        fetchRandomWordData { json ->
            val word = json.get("word")
            val embed = EmbedUtils.getDefaultEmbed()
                .setAuthor(word.get("pos").asText())
                .addField(word.get("definition").asText(), word.get("example").asText(), false)
                .addField("a word that does not exist; it was invented, defined and used by a machine learning algorithm.", "", false)

            val syllables = word.get("syllables")

            if (syllables.size() > 1) {
                embed.setDescription(syllables.joinToString("  Â·  ", transform = JsonNode::asText))
            }

            shortenLongHashUrl(json.get("permalink_url").asText(), ctx) { url ->
                embed.setTitle(word.get("word").asText(), url).setFooter("Permalink: $url")

                // We need to send the embed here since these methods are running async
                sendEmbed(ctx, embed)
            }
        }
    }

    private fun fetchRandomWordData(callback: (JsonNode) -> Unit) {
        WebUtils.ins.getJSONObject("https://www.thisworddoesnotexist.com/api/random_word.json").async(callback)
    }

    private fun shortenLongHashUrl(url: String, ctx: CommandContext, callback: (String) -> Unit) {
        AirUtils.shortenUrl(url, ctx.config.apis.googl, ctx.variables.jackson).async(callback)
    }
}
